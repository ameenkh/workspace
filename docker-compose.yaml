services:
  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", 'pg_isready | grep "accepting connections']
      interval: 30s
      timeout: 3s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_NODE_ID=0
      - KAFKA_CONTROLLER_BROKER_ID=0
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_LISTENERS=PLAINTEXT://:9094,CONTROLLER://:9093,EXTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9094,EXTERNAL://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - CLUSTER_ID=cluster-id-1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", '[ "$(kafka-cluster cluster-id --bootstrap-server kafka:9092)" == "Cluster ID: cluster-id-1" ]']
      interval: 30s
      timeout: 3s
      retries: 3

  kafka-ui:
    image: docker.redpanda.com/redpandadata/console:latest
    hostname: kafka-ui
    container_name: kafka-ui
    ports:
      - 9091:8080
    environment:
      - KAFKA_BROKERS=kafka:9094
    depends_on:
      - kafka
    networks:
      - net
  
  redis:
    image: redis/redis-stack-server:latest
    hostname: redis
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
      - ./files/redis.conf:/redis-stack.conf
    restart: always
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", '[ "$(redis-cli --no-auth-warning -a redis ping)" == "PONG" ]']
      interval: 30s
      timeout: 3s
      retries: 3

  mongo:
    image: mongo:latest
    hostname: mongo
    container_name: mongo
    ports:
      - 27017:27017
    command: ["--replSet", "rs0"]
    volumes:
      - mongo-data:/data/db
    networks:
      - net
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 30s
      timeout: 3s
      retries: 3
  
  mongo-ui:
    image: mongo-express:latest
    hostname: mongo-ui
    container_name: mongo-ui
    ports:
      - 27016:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    networks:
      - net

  cassandra:
    image: cassandra:latest
    hostname: cassandra
    container_name: cassandra
    ports:
      - 9042:9042
    volumes:
      - cassandra-data:/var/lib/cassandra
      # - ./files/cassandra.yaml:/etc/cassandra/cassandra.yaml
    networks:
      - net
    healthcheck:
      test: cqlsh -e "describe keyspaces"
      interval: 30s
      timeout: 3s
      retries: 3
    
networks:
  net:
    driver: bridge
volumes:
  postgres-data:
  kafka-data:
  redis-data:
  mongo-data:
  cassandra-data:
